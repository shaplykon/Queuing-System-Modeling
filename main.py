from display import *
from estimates import *
from constants import *
from simulation import *
from colorama import Fore


def run_multi_channel_system_simulation(show_additional_plots=False):
    for n, m, lambda_value, mu, v in TEST_DATA:
        simulation_results = []
        for simulation_time in SIMULATION_INTERVALS_FOR_MULTI_CHANNEL:
            environment = simpy.Environment()
            simulation_result = SimulationResult()
            system = QueuingSystem(n, m, lambda_value, mu, v, environment)
            environment.process(run_simulation(environment, simulation_result, system))
            environment.run(simulation_time)

            theoretical_result = get_theoretical_estimates_for_multi_channel(n, m, lambda_value, mu, v)
            empirical_result = get_empirical_estimates(simulation_result, system, simulation_time)
            comparative_result = compare_estimates(theoretical_result, empirical_result, simulation_time)

            # –í—ã–≤–æ–¥ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ(—Å–∞–º–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ) –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            # —Å–∏–º—É–ª—è—Ü–∏–∏. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            if simulation_time == SIMULATION_INTERVALS_FOR_MULTI_CHANNEL[len(SIMULATION_INTERVALS_FOR_MULTI_CHANNEL) - 1]:
                print(
                    f"\n–°–∏–º—É–ª—è—Ü–∏–∏ –°–ú–û —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ n={n}, m={m}, Œª={lambda_value}, ùúá={mu}, v={v} –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–º "
                    f" –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {simulation_time} –º–∏–Ω.\n")
                print_estimate_result(theoretical_result)
                print_estimate_result(empirical_result)
                print_estimate_result(comparative_result)
            else:
                simulation_results.append(comparative_result)

        show_time_dependence_plot(simulation_results, system)

        # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        # –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        # –∑–Ω–∞—á–µ–Ω–∏—è Œª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if show_additional_plots:
            lambda_simulation_results = []
            for test_lambda_value in range(1, 10):
                environment = simpy.Environment()
                simulation_result = SimulationResult()
                system = QueuingSystem(n, m, test_lambda_value, mu, v, environment)
                environment.process(run_simulation(environment, simulation_result, system))
                environment.run(SIMULATION_INTERVALS_FOR_MULTI_CHANNEL[len(SIMULATION_INTERVALS_FOR_MULTI_CHANNEL) - 1])
                empirical_result = get_empirical_estimates(simulation_result, system,
                                                           SIMULATION_INTERVALS_FOR_MULTI_CHANNEL[len(SIMULATION_INTERVALS_FOR_MULTI_CHANNEL) - 1])
                lambda_simulation_results.append(empirical_result)
            show_lambda_dependence_plot(lambda_simulation_results, system)


def run_single_channel_system_simulation():
    simulation_time = 100000
    empirical_results = []
    simulation_results = []
    for k in ERlANG_DISTRIBUTION_COEFFICIENTS:
        environment = simpy.Environment()
        simulation_result = SimulationResult()
        system = QueuingSystem(1, 2, 0.8, 0.4, 0, environment, k)
        environment.process(run_simulation_for_individual(environment, simulation_result, system))
        environment.run(simulation_time)

        theoretical_result = get_theoretical_estimates_for_single_channel(system.m, system.lambda_value, system.mu,
                                                                          system.k)

        empirical_result = get_empirical_estimates(simulation_result, system, simulation_time)
        comparative_result = compare_estimates(theoretical_result, empirical_result, simulation_time)
        empirical_results.append(empirical_result)

        # –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–º—É–ª—è—Ü–∏–∏.
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        if k == ERlANG_DISTRIBUTION_COEFFICIENTS[len(ERlANG_DISTRIBUTION_COEFFICIENTS) - 1]:
            print_estimate_result(theoretical_result)
            print_estimate_result(empirical_result)
            print_estimate_result(comparative_result, True)
        simulation_results.append(comparative_result)
    show_erlang_coefficient_dependence_plot(empirical_results, system)




if __name__ == "__main__":
    task_variant = input("–í–∞—Ä–∏–∞–Ω—Ç –∑–∞–¥–∞–Ω–∏—è: \n1) –û–±—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ \n2) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n")
    if task_variant == "1":
        show_plots = input(f"\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ \n"
                           f"–∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞?(Y/N)\n{Fore.YELLOW}"
                           f"*—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è{Fore.RESET}\n").upper()
        run_multi_channel_system_simulation(show_plots == "Y")
    if task_variant == "2":
        run_single_channel_system_simulation()
